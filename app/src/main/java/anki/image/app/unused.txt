    // Simple debugging button

    Button save_button = (Button) findViewById(R.id.save_button);
    save_button.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Log.d("Android :","Save button clicked");
            downloadImageFromUrl("https://icatcare.org/app/uploads/2018/07/Thinking-of-getting-a-cat.png");
        }
    });

    // Random Hex string

    private String getRandomHexString(int numchars){
        Random r = new Random();
        StringBuffer sb = new StringBuffer();
        while(sb.length() < numchars){
            sb.append(Integer.toHexString(r.nextInt()));
        }

        return sb.toString().substring(0, numchars);
    }

    // Image downloader

    public void downloadImageFromUrl(String downloadUrlOfImage){
        Log.d(TAG,"downloadImageFromUrl() called");
        if (isStoragePermissionGranted()){
            // Changing filename
            String[] fileNameSplits = downloadUrlOfImage.split("\\.");
            int extensionIndex = fileNameSplits.length - 1;

            String filename = getRandomHexString(8) + "." + fileNameSplits[extensionIndex];
            Log.d(TAG,"new filemname: " + filename);

            File sdCard = Environment.getExternalStorageDirectory();
            String folder = sdCard.getAbsolutePath();
            File dir = new File(folder);
            Log.d(TAG,"Folder: " + dir);

            if (!dir.exists()) {
                if (dir.mkdirs()) {
                    Log.i(TAG,"Directory  Created");
                }
            }

            DownloadManager dm = (DownloadManager) getApplicationContext().getSystemService(Context.DOWNLOAD_SERVICE);
            Uri downloadUri = Uri.parse(downloadUrlOfImage);
            DownloadManager.Request request = new DownloadManager.Request(downloadUri);
            request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI | DownloadManager.Request.NETWORK_MOBILE)
                    .setAllowedOverRoaming(false)
                    .setTitle(filename)
                    .setMimeType("image/jpeg")
                    .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
                    .setDestinationInExternalFilesDir(this, null, File.separator + filename);

            dm.enqueue(request);
        } else {
            Log.d("Android :","Storage permission missing");
        }
    }

    // Storage permission check

    public boolean isStoragePermissionGranted() {
        String TAG = "Storage Permission";
        if (Build.VERSION.SDK_INT >= 23) {
            if (this.checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    == PackageManager.PERMISSION_GRANTED) {
                Log.v(TAG, "Permission is granted");
                return true;
            } else {
                Log.v(TAG, "Permission is revoked");
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
                return false;
            }
        }
        else { //permission is automatically granted on sdk<23 upon installation
            Log.v(TAG,"Permission is granted");
            return true;
        }
    }

    // this path corresponds to the local storage for app files of this app
    //File path = new File(String.valueOf(getApplicationContext().getExternalFilesDir(null)),"2bd05276.png");

    //write file

    private void writeImageToStorage(String base64ImageData) {
        FileOutputStream fos = null;
        try {
            if (base64ImageData != null) {
                byte[] decodedString = android.util.Base64.decode(base64ImageData, android.util.Base64.DEFAULT);

                File f = new File(Environment.getExternalStorageDirectory() + File.separator + "test.png");
                f.mkdirs();
                f.createNewFile();

                fos = new FileOutputStream(f);
                fos.write(decodedString);
                fos.flush();
                fos.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (fos != null) {
                fos = null;
            }
        }
    }

        public Map<String, String> getCardWithoutImage(){
            Log.d(TAG, "getCardWithoutImage() called");
            Cursor cardCursor = mContentResolver.query(FlashCardsContract.Note.CONTENT_URI,
                    null,
                    "deck:\"" + mDeckName + "\"" + " note:\"" + mModelName + "\"",
                    null,
                    null);
            if (cardCursor != null) {
                Log.d(TAG, "Count for no images: " + cardCursor.getCount());
                for (int i = cardCursor.getCount() - 1; i > -1; i--) {
                    if (i % 100 == 0) Log.d(TAG, "Index at " + i + "...");
                    cardCursor.moveToPosition(i);
                    int columnIndex = cardCursor.getColumnIndex("flds");
                    String fields = cardCursor.getString(columnIndex);
                    if (!fields.contains("img")) {
                        Log.d(TAG, "Found card without image!");
                        return getCursorInfo(cardCursor, i);
                    }
                }
                cardCursor.close();
            }
            return null;
        }

 ##################################################
 ##############  LAYOUT
 ##################################################

             <TextView
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:labelFor="@+id/deckSpinner"
                 android:layout_gravity="center"
                 android:text="Add example card"/>

             <Button
                 android:id="@+id/add_example_card_btn"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:text="Add card"
                 android:layout_gravity="center"/>

             <TextView
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:layout_gravity="center"
                 android:labelFor="@+id/deckSpinner"
                 android:text="Picks a card at random"/>

             <Button
                 android:id="@+id/button_auto_cards"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:layout_gravity="center"
                 android:text="@string/auto_cards"/>